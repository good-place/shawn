(import shawn :as s)
(import events :as e )

(:observe s/Store (fn [old-state new-state] (when (< 1 (new-state :amount)) (print "Oh big amount"))))
(:observe s/Store (fn [old-state new-state] 
                  (when (and (old-state :amount) (new-state :amount))
                                                     (when (< (old-state :amount) (new-state :amount))
                                                      (print "Oh yes amount went up"))
                                                     (when (> (old-state :amount) (new-state :amount))
                                                      (print "Oh no amount went down")))))
(:transact s/Store e/PrepareState)
(while true 
  (case (string/trim (getline "Command [+ - 0 q]: "))
    "+" (:transact s/Store e/IncreaseAmount)
    "-" (:transact s/Store e/DecreaseAmount)
    "s" (:transact-all s/Store e/PrintHOHOHO e/PrintHOHOHO)
    "0" (:transact s/Store e/ZeroAmount)
    "q" (:transact s/Store e/Exit)
    (print "Unknown command"))
  (pp (s/Store :state)))
